{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "SNM API",
    "description": "Documentation for the APIs of our website: Social Network for Music."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "fetch",
      "description": "Endpoints for fetching and searching content."
    },
    {
      "name": "users",
      "description": "Endpoints for the management of user data and related operations."
    },
    {
      "name": "auth",
      "description": "Endpoints related to authentication and user authorization."
    },
    {
      "name": "playlist",
      "description": "Endpoints for the orchestration of playlists."
    },
    {
      "name": "community",
      "description": "Endpoints for managing community-related data and interactions."
    },
    {
      "name": "tracks",
      "description": "Endpoints for retrieving and managing track information."
    },
    {
      "name": "misc",
      "description": "Miscellaneous endpoints catering to various operations."
    },
    {
      "name": "artists",
      "description": "Endpoints for retrieving and managing artist-related information."
    }
  ],
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/playlist": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to fetch the playlists.html file",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to fetch the login page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Endpoint that allows to check if user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Body to validate login.",
            "schema": {
              "$ref": "#/definitions/loginrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User login data is valid",
            "schema": {
              "$ref": "#/definitions/loggeduser"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User not authorized"
          }
        }
      }
    },
    "/register": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to fetch the register page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Endpoint that allows to register a new user in the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Body to be registered in the DB.",
            "schema": {
              "$ref": "#/definitions/registerrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully registered."
          },
          "400": {
            "description": "User already exists"
          },
          "500": {
            "description": "Generic error"
          }
        }
      }
    },
    "/explore": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to fetch the explore.html file",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/createplaylist": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to obtain createplaylist.html page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "playlist"
        ],
        "description": "Endpoint that allows to create a new playlist",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "tuple used for verification",
            "schema": {
              "$ref": "#/definitions/playlists"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "playlist created."
          },
          "400": {
            "description": "Error while creating the playlist or missing parameter"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/community": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to obtain community.html page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/createcommunity": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to obtain createcommunity.html page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to obtain index.html page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "fetch"
        ],
        "description": "Endpoint that allows to fetch the profile page",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "description": "Endpoint that allows to obtain a specific user given its _id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID to fetch."
          }
        ],
        "responses": {
          "200": {
            "description": "user found.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "description": "Endpoint that allows to update of a specific user given its _id and the new Data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID to be updated."
          },
          {
            "name": "body",
            "in": "body",
            "description": "Body that contains updated data to be sent to the DB.",
            "schema": {
              "$ref": "#/definitions/updateuser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated."
          },
          "400": {
            "description": "Missing name / nickname / email / User already exists"
          },
          "500": {
            "description": "Generic error"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "description": "Endpoint that allows to delete a specific user from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "User delted succesfully"
          },
          "400": {
            "description": "User does not exist"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "description": "Endpoint that allows to fetch all users from the database",
        "responses": {
          "200": {
            "description": "List of users."
          }
        }
      }
    },
    "/authuser": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Endpoint that allows to verify if user tuple of _id, email and nickname are valid in the database.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "tuple used for verification",
            "schema": {
              "$ref": "#/definitions/authuser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "succesfully authorized.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "tracks"
        ],
        "description": "ADD DESCRIPTION",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/tracks": {
      "get": {
        "tags": [
          "tracks"
        ],
        "description": "ADD DESCRIPTION",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/tracks/{id}": {
      "get": {
        "tags": [
          "tracks"
        ],
        "description": "ADD DESCRIPTION",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/artist/{id}": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "ADD DESCRIPTION",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/artists/{id}": {
      "get": {
        "tags": [
          "artists"
        ],
        "description": "ADD DESCRIPTION",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/playlist/{id}": {
      "get": {
        "tags": [
          "playlist"
        ],
        "description": "Endpoint that allows to obtain user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Id of the user we want to fetch playlists of."
          }
        ],
        "responses": {
          "200": {
            "description": "list of playlists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/community/{id}": {
      "get": {
        "tags": [
          "community"
        ],
        "description": "ADD DESCRIPTION",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/getGenres": {
      "get": {
        "tags": [
          "misc"
        ],
        "description": "Endpoint that allows to fetch all genres from spotify",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "ObjectId('64df73b31e5eda5eb868ddcd')"
        },
        "name": {
          "type": "string",
          "example": "Joe"
        },
        "nickname": {
          "type": "string",
          "example": "joedough"
        },
        "surname": {
          "type": "string",
          "example": "Joe"
        },
        "email": {
          "type": "string",
          "example": "joedough@example.com"
        },
        "password": {
          "type": "string",
          "example": "md5 hashed password"
        },
        "date": {
          "type": "string",
          "example": "2001-09-11"
        },
        "genres": {
          "type": "object",
          "properties": {
            "0": {
              "type": "string",
              "example": "pop"
            },
            "1": {
              "type": "string",
              "example": "rock"
            },
            "2": {
              "type": "string",
              "example": "metal"
            }
          }
        }
      }
    },
    "playlists": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "ObjectId('64e748f0cb18ad90657b9043')"
        },
        "owner_id": {
          "type": "string",
          "example": "64df73b31e5eda5eb868ddcd"
        },
        "title": {
          "type": "string",
          "example": "Example Playlist"
        },
        "description": {
          "type": "string",
          "example": "Description of playlist"
        },
        "public": {
          "type": "boolean",
          "example": true
        },
        "tags": {
          "type": "object",
          "properties": {
            "0": {
              "type": "string",
              "example": "chill"
            },
            "1": {
              "type": "string",
              "example": "relax"
            },
            "2": {
              "type": "string",
              "example": "vibes"
            }
          }
        },
        "songs": {
          "type": "object",
          "properties": {
            "0": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Song 1"
                },
                "artist": {
                  "type": "string",
                  "example": "Artist1, Artist2, Artist3"
                },
                "duraion": {
                  "type": "string",
                  "example": "00:01:11"
                }
              }
            },
            "1": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Song 2"
                },
                "artist": {
                  "type": "string",
                  "example": "Artist1, Artist2, Artist3"
                },
                "duraion": {
                  "type": "string",
                  "example": "00:02:22"
                }
              }
            },
            "2": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "example": "Song 3"
                },
                "artist": {
                  "type": "string",
                  "example": "Artist1, Artist2, Artist3"
                },
                "duraion": {
                  "type": "string",
                  "example": "00:03:33"
                }
              }
            }
          }
        },
        "private": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "updateuser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Jhon"
        },
        "nickname": {
          "type": "string",
          "example": "johndough"
        },
        "email": {
          "type": "string",
          "example": "johndough@example.com"
        },
        "surname": {
          "type": "string",
          "example": "Dough"
        }
      },
      "required": [
        "name",
        "nickname",
        "email",
        "surname"
      ]
    },
    "loggeduser": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "64df73b31e5eda5eb868ddcd"
        },
        "nickname": {
          "type": "string",
          "example": "johndough"
        },
        "email": {
          "type": "string",
          "example": "johndough@gmail.com"
        }
      },
      "required": [
        "_id",
        "nickname",
        "email"
      ]
    },
    "loginrequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "johndough@gmail.com"
        },
        "nickname": {
          "type": "string",
          "example": "johndough"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      },
      "required": [
        "password"
      ]
    },
    "registerrequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "John"
        },
        "nickname": {
          "type": "string",
          "example": "johndough"
        },
        "email": {
          "type": "string",
          "example": "johndough@example.com"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      },
      "required": [
        "name",
        "nickname",
        "email",
        "password"
      ]
    },
    "authuser": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "64df73b31e5eda5eb868ddcd"
        },
        "nickname": {
          "type": "string",
          "example": "johndough"
        },
        "email": {
          "type": "string",
          "example": "johndough@gmail.com"
        }
      },
      "required": [
        "_id",
        "nickname",
        "email"
      ]
    }
  }
}